import Head from "next/head";
import YouTube from "react-youtube";
import { Options } from "youtube-player/dist/types";
import styles from "@/styles/video.module.css";
import { ReactElement, ReactNode, useEffect, useState, FC } from "react";
import { youtube_v3 } from "@googleapis/youtube";
import Linkify from "linkify-react";
import "linkify-plugin-hashtag";
import "linkify-plugin-mention";
import Link from "next/link";
import { IntermediateRepresentation } from "linkifyjs";
import { getFormattedDateTime } from "@/utils/date-utils";
import { useRouter } from "next/router";

const Video = () => {
  const router = useRouter();
  let videoId = router.query.videoId ? router.query.videoId.toString() : null;

  const opts: Options = {
    playerVars: {
      rel: 0,
    },
  };

  const [data, setData] = useState<youtube_v3.Schema$Video>();

  useEffect(() => {
    const f = async () => {
      const data = await fetch(`/api/youtube/videos/${videoId}`);
      const json = (await data.json()) as youtube_v3.Schema$VideoListResponse;
      const one = json.items![0];
      setData(one);
    };
    if (videoId) {
      f();
    }
  }, [videoId]);

  const renderLink = ({ attributes, content }: IntermediateRepresentation) => {
    const { href, ...props } = attributes;

    return (
      <Link href={href} {...props}>
        {content}
      </Link>
    );
  };

  const descriptionTag = (() => {
    const description = data?.snippet?.description;

    if (!description) {
      return null;
    }

    const lines = description.split("\n\n");
    const tag = lines.map((line, index) => {
      let sentences = line.split("\n");
      return (
        <p key={index}>
          {sentences.reduce<ReactNode[]>((prev, curr, index2) => {
            if (index2 === 0) {
              return [...prev, curr];
            }
            return [...prev, <br key={index2} />, curr];
          }, [])}
        </p>
      );
    });

    const options = {
      render: {
        url: renderLink,
        hashtag: renderLink,
        mention: renderLink,
      },
    };

    return <Linkify options={options}>{tag}</Linkify>;
  })();

  const publishedAt = data?.snippet?.publishedAt;
  const publishedAtDate = publishedAt
    ? getFormattedDateTime(new Date(publishedAt))
    : null;

  return (
    <>
      <Head>
        <title>Video</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1>Video</h1>

        {videoId && data && (
          <div>
            <p>{data.id}</p>
            <p>{publishedAtDate}</p>
            <p>{data.snippet?.title}</p>
            <div className={styles.statistics}>
              <p> view : {data.statistics?.viewCount} </p>
              <p> like : {data.statistics?.likeCount} </p>
              <p> comment : {data.statistics?.commentCount} </p>
              <p> favorite : {data.statistics?.favoriteCount} </p>
            </div>

            <YouTube
              videoId={videoId}
              opts={opts}
              className={styles.youtubeContainer}
            />

            <div>{descriptionTag}</div>
          </div>
        )}
      </main>
    </>
  );
};
export default Video;
